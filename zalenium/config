Zalenium locally on OSX

1 Install Homebrew 

ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

2 Install Docker, the docker daemon and helpful tools 

brew cask install docker

3 Launch Docker

open /Applications/Docker.app

4 Pull Zalenium images

docker pull elgalu/selenium
docker pull dosel/zalenium

5 Run Zalenium

docker run --rm -ti --name zalenium -p 4444:4444 \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -v /tmp/videos:/home/seluser/videos \
  --privileged dosel/zalenium start

  6 Access your dashboard here: http://localhost:4444/dashboard/




  conf file: ./wdio.conf.local.grid.js

  const base = require('./wdio.conf.base');

exports.config = Object.assign(base.config, {
    hostname: 'localhost',
    port: 4444,
    path: '/wd/hub',
    maxInstances: 2,

    capabilities: [{
        maxInstances: 2,

        browserName: 'chrome',
        'zal:recordVideo': process.env.VIDEO_RECORDING_ENABLED,
        'zal:name': 'GWW UI Tests',
        'zal:build': 'WebDriverIO',
    }],
    services: ['selenium-standalone', 'shared-store'],

    // eslint-disable-next-line object-shorthand, no-unused-vars, func-names
    beforeSession: function (config, capabilities, specs) {
        const specName = String(specs)
            .split('/')
            .pop();

        capabilities['zal:name'] = specName;
    },
});



RUN: ./node_modules/.bin/wdio ./wdio.conf.local.grid.js --spec ./test/specs/samples/basic.js

____________

REMOTELY:

FILE CONF: /wdio.conf.REMOTE.grid.js
const base = require('./wdio.conf.base');

exports.config = Object.assign(base.config, {
    hostname: 'zalenium-quality-testing.ospdev.dev-gcom.grainger.com',
    port: 80,
    path: '/wd/hub',
    maxInstances: 1,

    capabilities: [{
        maxInstances: 1,
        acceptInsecureCerts: true,
        browserName: 'chrome',
        'zal:recordVideo': 'true',
        'zal:name': 'GWW UI Tests',
        'zal:build': 'WebDriverIO',
    }],
    services: ['selenium-standalone', 'shared-store'],

    // eslint-disable-next-line object-shorthand, no-unused-vars, func-names
    beforeSession: function (config, capabilities, specs) {
        const specName = String(specs)
            .split('/')
            .pop();
        const buildName = String(specs)
            .split('/', 9)
            .pop();
        capabilities['zal:build'] = buildName;
        capabilities['zal:name'] = specName;
    },
});

UN: ./node_modules/.bin/wdio ./wdio.conf.REMOTE.grid.js --spec ./test/specs/samples/basic.js
